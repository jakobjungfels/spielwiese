name: 'Deployment'

env:
  ARM_CLIENT_ID: '${{ secrets.CLIENT_ID }}'
  ARM_CLIENT_SECRET: '${{ secrets.CLIENT_SECRET }}'
  ARM_TENANT_ID: '${{ secrets.TENANT_ID }}'
  ARM_SUBSCRIPTION_ID: '${{ secrets.SUBSCRIPTION_ID }}'

on:
  pull_request:
    types:
    - 'opened'
    - 'synchronize'
    - 'closed'
    - 'reopened'
    branches:
    - 'main'

permissions:
  contents: read

jobs:
  deployment:
    name: 'Deployment'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Azure login
      uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Checks K8S
      working-directory: ./kubernetes_cluster
      run: |
        terraform init
        terraform fmt -check
        terraform plan -input=false -var 'aks_service_principal_app_id=${{ secrets.CLIENT_ID }}' -var 'aks_service_principal_client_secret=${{ secrets.CLIENT_SECRET }}' -var 'aks_service_principal_object_id=${{ secrets.CLIENT_OBJECT_ID }}'

    - name: Terraform Apply K8S
      working-directory: ./kubernetes_cluster
      # if: github.event.pull_request.merged
      run: |
        terraform init
        terraform apply -auto-approve -input=false -var 'aks_service_principal_app_id=${{ secrets.CLIENT_ID }}' -var 'aks_service_principal_client_secret=${{ secrets.CLIENT_SECRET }}' -var 'aks_service_principal_object_id=${{ secrets.CLIENT_OBJECT_ID }}'
        terraform output kube_config > ./config
        tail -n +3 ./config > ./config_ && mv ./config_ ./config
        mkdir -p ~/.kube
        head -n -12 ./config > ~/.kube/config
        
    # - name: Terraform Checks ContainerRegistry
    #   working-directory: ./container_registry
    #   run: |
    #     terraform init
    #     terraform fmt -check
    #     terraform plan -input=false -var 'aks_service_principal_app_id=${{ secrets.CLIENT_ID }}'

    # - name: Terraform Apply ContainerRegistry
    #   working-directory: ./container_registry
    #   if: github.event.pull_request.merged
    #   run: |
    #     terraform apply -auto-approve -input=false -var 'aks_service_principal_app_id=${{ secrets.CLIENT_ID }}'
    #     terraform output -raw admin_password

    - name: Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.9'
      id: install

    - name: Deploy ArgoCD
      working-directory: ./argocd
      # if: github.event.pull_request.merged
      run: |
        kubectl version
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd --patch-file ./patch_file.yaml
        kubectl get secret -n argocd argocd-initial-admin-secret -o yaml

    # - name: Deploy ArgoCD
    #   working-directory: ./argocd
    #   if: github.event.pull_request.merged
    #   run: |
    #     kubectl create namespace argocd
    #     kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    #     kubectl patch svc argocd-server -n argocd --patch-file ./patch_file.yaml
    #     kubectl get secret -n argocd argocd-initial-admin-secret -o yaml